#include "mysql_pool.h"

#include <iostream>
#include "my_lib.h"

CMysqlPool *CMysqlPool::s_pMysqlPool = NULL;

CMysqlPool::CMysqlPool()
{
	pthread_mutex_init(&m_mutexPool, NULL);
	m_pPoolMgr = NULL;
	m_nFlag = 0;
}

CMysqlPool::~CMysqlPool()
{
	pthread_mutex_destroy(&m_mutexPool);
	m_pPoolMgr = NULL;
}

CMysqlPool *CMysqlPool::GetInstance()
{
	if(NULL == s_pMysqlPool)
	{
		s_pMysqlPool = new CMysqlPool();// Destroy()函数中delete
	}

	return s_pMysqlPool;
}

void CMysqlPool::DestroyInstance()
{
	if (NULL != s_pMysqlPool)
	{
		s_pMysqlPool->UnInit();
		delete s_pMysqlPool;
		s_pMysqlPool = NULL;
	}
}

// 初始化Mysql节点管理器
int CMysqlPool::Init(const char* strMasterHost,const int nMasterPort,const int nMasterConnNum, //  主mysql的信息
					const char* strMasterDb,const char* strMasterUser,const char* strMasterPasswd,
					 const int nSlaveNums,const int nSlaveConnNum,char strSlaveHost[MAX_SLAVE_NUM][HOST_LEN],int pSlavePort[MAX_SLAVE_NUM], // 从mysql的信息
					 const char* strDb,const char* strUser,const char* strPasswd)          // 数据库信息

{
	if (NULL == strMasterHost|| NULL == strMasterUser || NULL == strMasterPasswd || NULL == strMasterDb
		|| NULL == strUser || NULL == strPasswd || NULL == strDb ||
		nMasterConnNum <=0 || nSlaveNums <= 0 || nSlaveConnNum <=0)
	{
		//UB_LOG_NOTICE("Invalid Input");
		return ERROR;
	}

	m_nMgrNum = nSlaveNums + 1;
	m_pPoolMgr = new CConnPool* [m_nMgrNum];

	// 初始化主mysql的连接池
	m_pPoolMgr[0] = new CConnPool();
	int nRet = m_pPoolMgr[0]->Init(nMasterConnNum,strMasterHost,strMasterDb,strMasterUser,strMasterPasswd,NULL,nMasterPort);
	if (nRet < 0)
	{
		//UB_LOG_NOTICE("Init Master Mysql Fail");
		return ERROR;
	}

	for (int i = 1; i < m_nMgrNum ;++i)
	{
		m_pPoolMgr[i] = new CConnPool();
		nRet = m_pPoolMgr[i]->Init(nSlaveConnNum,strSlaveHost[i-1],strDb,strUser,strPasswd,NULL,pSlavePort[i-1]);
		if (nRet < 0)
		{
			//UB_LOG_NOTICE("Init Slave:%d Fail",i);
			return ERROR;
		}
	}

	return OK;
}


void CMysqlPool::UnInit()
{
	if(m_pPoolMgr == NULL)
	{
		return;
	}

	for(int i = 0; i < m_nMgrNum; i++)
	{
		if (NULL != m_pPoolMgr[i])
		{
			m_pPoolMgr[i]->UnInit();
		}
	}

	delete[] m_pPoolMgr;
	m_pPoolMgr = NULL;
}

CConnection* CMysqlPool::GetConn(int nType,int &nId)
{
	if (WRITE_TYPE == nType)
	{
		nId = 0;
	}
	else if (READ_TYPE == nType)
	{
		pthread_mutex_lock(&m_mutexPool);
		m_nFlag++;
		m_nFlag = m_nFlag % (m_nMgrNum - 1) + 1;
		nId = m_nFlag;
		pthread_mutex_unlock(&m_mutexPool);
	}
	else
	{
		return NULL;
	}

	return m_pPoolMgr[nId]->GetCon();
}


void CMysqlPool::ReleaseConn(int nId,CConnection *pCon)
{
	if (nId < 0 || nId >= m_nMgrNum)
	{
		return;
	}

	m_pPoolMgr[nId]->Release(pCon);
}

