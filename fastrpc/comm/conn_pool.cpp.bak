#include "conn_pool.h"

#include <iostream>
#include "my_lib.h"

const int WAIT_TIME = 10000; //等待时间，微秒为单位
CConnPool *CConnPool::s_pConnPool = NULL;

CConnPool::CConnPool()
{
	// 初始化锁
	pthread_mutex_init(&m_mutexPool, NULL);
	// 初始化信号量
	sem_init(&m_sem,0,0);
}

CConnPool::~CConnPool()
{
	// 释放锁
	pthread_mutex_destroy(&m_mutexPool);

	// 销毁信号量
	sem_destroy(&m_sem);
}

CConnPool *CConnPool::GetInstance()
{
	if(NULL == s_pConnPool)
	{
		s_pConnPool = new CConnPool();// Destroy()函数中delete
	}

	return s_pConnPool;
}

void CConnPool::DestroyInstance()
{
	if (NULL != s_pConnPool)
	{
		s_pConnPool->UnInit();
		delete s_pConnPool;
		s_pConnPool = NULL;
	}
}

int CConnPool::Init(int nNum, const char *strHost, const char *strDb, const char *strUser, const char *strPasswd, const char *strDbType, int nPort)
{
	//UB_LOG_DEBUG("Host: %s, User: %s, Pass: %s, Db: %s", strHost, strUser, strPasswd, strDb);
	if(NULL == strHost|| NULL == strUser || NULL == strPasswd || NULL == strDb)
	{
		//UB_LOG_NOTICE("Invalid Input");
		return ERROR;
	}
	m_nNum = nNum;
	m_pPool = new CConnection*[m_nNum]; // 在UnInit中释放
	for(int i=0; i < m_nNum; i++)
	{
		m_pPool[i] = new CConnection; //Destroy中释放
		if(m_pPool[i]->Connect(strHost, strUser, strPasswd, strDb, nPort) == ERROR)
		{
			//UB_LOG_NOTICE("connect errror!");
			return ERROR;
		}

		// 将空闲节点加入空闲节点池
		Release(m_pPool[i]);
	}

	//UB_LOG_DEBUG("pool point:%p", m_pPool);
	return OK;
}

CConnection *CConnPool::GetCon()
{
	// 阻塞等待空闲节点池非空
	int nRet = sem_wait(&m_sem);
	if (nRet < 0)
	{
		//UB_LOG_NOTICE("sem_wait Fail!");
		return NULL;
	}

	pthread_mutex_lock(&m_mutexPool);
	std::list<CConnection*>::iterator it = m_pFreeNodeList.begin();
	if (it == m_pFreeNodeList.end())
	{
		// 节点池为空，直接返回空指针
		pthread_mutex_unlock(&m_mutexPool);
		return NULL;
	}

	CConnection* pConn = *it;
	m_pFreeNodeList.pop_front();
	pthread_mutex_unlock(&m_mutexPool);
	return pConn;
}

void CConnPool::Release(CConnection *pCon)
{
	if (NULL == pCon)
	{
		//UB_LOG_NOTICE("pCon is NULL");
		return;
	}
	pthread_mutex_lock(&m_mutexPool);
	m_pFreeNodeList.push_back(pCon);
	// 给信号量+1
	sem_post(&m_sem);
	pthread_mutex_unlock(&m_mutexPool);
}

void CConnPool::UnInit()
{
	if(m_pPool == NULL)
	{
		return;
	}

	pthread_mutex_lock(&m_mutexPool);
	for(int i = 0; i < m_nNum; i++)
	{
		if(m_pPool[i] != NULL)
		{
			m_pPool[i]->Close();
			delete m_pPool[i];
			m_pPool[i] = NULL;
		}
	}

	if(m_pPool != NULL)
	{
		delete[] m_pPool;
		m_pPool = NULL;
	}

	m_pFreeNodeList.clear();
	pthread_mutex_unlock(&m_mutexPool);
}
